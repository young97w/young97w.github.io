[{"content":"LC704 参考：\n题目链接：https://leetcode.cn/problems/binary-search/\n文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html\n视频讲解：https://www.bilibili.com/video/BV1fA4y1o715\n要点：二分查找\n每次二分查找时候都没注意过区间的选择，总是根据区间来debug确定边界\n左闭右开\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func search(nums []int, target int) int { left, right := 0, len(nums)-1 for left \u0026lt;= right { mid := left + (right-left)/2 if nums[mid] == target { return mid } else if nums[mid] \u0026lt; target { left = mid + 1 } else { right = mid - 1 } } return -1 } 左闭右开\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func search(nums []int, target int) int { left, right := 0, len(nums)-1 for left \u0026lt; right { mid := left + (right-left)/2 if nums[mid] == target { return mid } else if nums[mid] \u0026lt; target { left = mid + 1 } else { right = mid } } return -1 } 对于 nums[mid] \u0026gt; target时，mid位置已被检查且大于目标值，此时将right赋值mid，因为区间是[left,right) 则不包含right\nQ1: mid := (right + left) / 2 和 mid := left + (right - left) / 2 的区别 这是一个很好的问题。这两种计算中间索引的方法看起来很相似，但在某些情况下会有重要的区别。让我们来比较一下这两种方法：\nmid := (right + left) / 2 mid := left + (right - left) / 2 主要区别：\n整数溢出问题：\n(right + left) / 2 可能会导致整数溢出。如果 right 和 left 都是非常大的正数，它们的和可能会超过整数类型能表示的最大值。 left + (right - left) / 2 不会导致溢出，因为它首先计算差值，然后进行除法，最后加上 left。 数学等价性：\n这两个表达式在数学上是等价的。我们可以通过代数来证明：\n1 2 3 4 left + (right - left) / 2 = left + right/2 - left/2 = (2*left + right - left) / 2 = (left + right) / 2 性能：\n在大多数现代编译器和处理器上，这两种方法的性能差异可以忽略不计。\n可读性：\n(right + left) / 2 可能更直观，直接表达了\u0026quot;取两个数的平均值\u0026quot;的意图。 left + (right - left) / 2 虽然看起来稍微复杂一些，但它明确地表示了\u0026quot;从左边界开始，加上区间一半的长度\u0026quot;。 推荐使用 left + (right - left) / 2 的原因：\n安全性：它避免了整数溢出的风险，使得代码在处理非常大的数组时也能正确工作。\n通用性：这种写法在各种编程语言和整数类型中都能正确工作，不受限于特定的整数表示范围。\n精确性：在某些编程语言中（如 Java），当 left 和 right 都是 int 类型时，(right + left) 的结果可能会在除以 2 之前溢出。而 left + (right - left) / 2 能确保中间结果始终在 int 范围内。\n示例情况：\n假设我们使用 32 位有符号整数，left = 2^30，right = 2^30 + 100：\n(right + left) / 2 可能会导致溢出，因为 2^30 + 2^30 超过了 32 位整数能表示的最大值。 left + (right - left) / 2 会正确计算：2^30 + (100) / 2 = 2^30 + 50。 总结：虽然在大多数常见情况下，这两种方法都能正确工作，但使用 left + (right - left) / 2 是一种更安全、更通用的做法，特别是在处理可能涉及非常大的索引值时。\nLC27 参考：\n题目链接：https://leetcode.cn/problems/remove-element/\n文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html\n视频讲解：https://www.bilibili.com/video/BV12A4y1Z7LP\n解法一：首尾指针 这个题的最佳指针应该是快慢指针，先想到了首尾指针就用上。这个解法不够优雅。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 func removeElement(nums []int, val int) int { // 处理空数组情况 if len(nums) == 0 { return 0 } // 双指针 left := 0 right := len(nums) - 1 // 当左指针小于等于右指针时继续 for left \u0026lt;= right { // 找到左边等于val的元素 for left \u0026lt;= right \u0026amp;\u0026amp; nums[left] != val { left++ } // 找到右边不等于val的元素 for left \u0026lt;= right \u0026amp;\u0026amp; nums[right] == val { right-- } // 如果左指针仍然小于等于右指针，交换元素 if left \u0026lt;= right { nums[left] = nums[right] left++ right-- } } return left } 解法二：快慢指针\n原理是块指针向末尾移动，将符合要求的值移动到慢指针。\n1 2 3 4 5 6 7 8 9 10 11 12 func removeElement(nums []int, val int) int { slow , fast := 0,0 for fast \u0026lt; len(nums) { if nums[fast] != val { nums[slow] = nums[fast] slow++ } fast++ } return slow } LC977 参考：\n题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/\n文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html\n视频讲解： https://www.bilibili.com/video/BV1QB4y1D7ep\n解法：首位指针+开辟一块内存空间存放新数组\n初见这道题就想到用首位指针将数组元素交换，但是在遍历同时改变数组显然不是科学的方法，停滞10分钟，看了题解才发现，新开辟内存空间存放即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func sortedSquares(nums []int) []int { res := make([]int, len(nums)) index := len(nums) - 1 l, r := 0, len(nums)-1 for l \u0026lt;= r { lv := nums[l] * nums[l] rv := nums[r] * nums[r] if lv \u0026lt; rv { res[index] = rv r-- } else { res[index] = lv l++ } index-- } return res } ","date":"2024-10-17T21:07:00+08:00","permalink":"https://young97w.github.io/p/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9-%E6%95%B0%E7%BB%84-lc70427977/","title":"代码随想录算法训练营第一天 ｜数组 LC704、27、977"},{"content":"这是一篇测试文章\n","date":"2024-10-16T16:21:24+08:00","permalink":"https://young97w.github.io/p/test/","title":"Test"}]